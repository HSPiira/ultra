# Generated by Django 5.1.4 on 2025-10-31 13:08

from django.db import migrations
from collections import Counter


def fix_duplicate_plan_names(apps, schema_editor):
    """Fix duplicate plan names by appending index to duplicates."""
    Plan = apps.get_model("schemes", "Plan")

    # Get all plan names
    plans = Plan.objects.all().order_by('created_at')
    
    # Track normalized names and already assigned names
    name_counter = Counter()
    assigned_names = set()

    for plan in plans:
        # Normalize whitespace first
        normalized_name = plan.plan_name.strip()
        name_counter[normalized_name] += 1

        # Determine the final name
        if name_counter[normalized_name] == 1 and normalized_name not in assigned_names:
            # First occurrence, use as-is
            final_name = normalized_name
        else:
            # Duplicate detected, generate unique candidate name
            final_name = normalized_name
            candidate_number = 2
            # Keep incrementing until we find an unused name
            while final_name in assigned_names:
                final_name = f"{normalized_name} {candidate_number}"
                candidate_number += 1
        
        # Update counters and sets, assign and save
        assigned_names.add(final_name)
        if plan.plan_name != final_name:
            plan.plan_name = final_name
            plan.save(update_fields=['plan_name'])


class Migration(migrations.Migration):
    dependencies = [
        ("schemes", "0007_alter_benefit_plan_alter_scheme_card_code"),
    ]

    operations = [
        migrations.RunPython(fix_duplicate_plan_names, migrations.RunPython.noop),
    ]
